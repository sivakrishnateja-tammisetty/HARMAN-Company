1. string example using constructor in c++?

#include <iostream>
#include<string>
using namespace std;
int main() {
   string emptyString;
   const char* c_styleString="Hello siva";
   string copyconstr_string(c_styleString);
   string original="Hello siva krishna";
   string substring(original,6,2);
   string repeatedchar(4,'*');
   cout<<"Empty string:"<<emptyString<<endl;
   cout<<"C_style string :"<<c_styleString<<endl;
   cout<<"Copied string using cnstr :"<<copyconstr_string<<endl;
   cout<<"Sub string :"<<substring<<endl;
   cout<<"Repeated character :"<<repeatedchar<<endl;

    return 0;
}

o/P:
Empty string:
C_style string :Hello siva
Copied string using cnstr :Hello siva
Sub string :si
Repeated character :****









2.Lazy initialization in c++ and how to use it?


*Lazy initialization is a technique where you delay the creation or initialization of an object until the point at which it is actually needed. 
*This can be useful in situations where the initialization of an object is expensive or resource-intensive, and you want to defer it until it's necessary.

Eg:
#include <iostream>
#include <string>
using namespace std;
class LazyInitialization
{
    bool isinitialized;
    string expensiveData;
    void isInitialized()
    {
        isinitialized=true;
        expensiveData="This is an expensive operation";
    }
    public:
    LazyInitialization():isinitialized(false){}
    const string& getExpensiveData()
    {
        if(!isinitialized)
        {
            isInitialized();
        }
        return expensiveData;
    }
};
int main()
{
    LazyInitialization obj;
    cout<<"Getting expensive data :"<<obj.getExpensiveData()<<endl;
    cout<<"Again getting expensive data :"<<obj.getExpensiveData()<<endl;
}

o/p:
Getting expensive data :This is an expensive operation
Again getting expensive data :This is an expensive operation




3. Template programming in c++?
*A C++ template is a powerful feature added to C++. 
*It allows you to define the generic classes and generic functions and thus provides support for generic programming.
*Generic programming is a technique where generic types are used as parameters in algorithms so that they can work for a variety of data types.
*types of templates: function template & template class


Eg: Function template

#include <iostream>
using namespace std;
template<typename T>
T add(T a,T b)
{
    return a+b;
}
int main()
{
   cout<<add(2,4)<<endl;
   cout<<add(4.1,2.1);
   return 0;
}
o/p:
6
6.2


#include <iostream>
using namespace std;
template<typename T1,typename T2>
T2 add(T1 a,T2 b)
{
    return a+b;
}
int main()
{
   cout<<add(2,4.1)<<endl;
   cout<<add(2.1,4);
   return 0;
}
o/p:
6.1
6



Eg: Template class

#include <iostream>
using namespace std;
template<class T>
class Arith
{
    T a,b;
    public:
    Arith(T x,T y):a(x),b(y){}
    T add()
    {
        return a+b;
    }
    void display()
    {
        cout<<"Addition :"<<add()<<endl;
    }
};
int main()
{
    Arith<int>obj(3,4);
    obj.display();
   
   return 0;
}
o/p:
Addition:7
