1. string example using constructor in c++?

#include <iostream>
#include<string>
using namespace std;
int main() {
   string emptyString;
   const char* c_styleString="Hello siva";
   string copyconstr_string(c_styleString);
   string original="Hello siva krishna";
   string substring(original,6,2);
   string repeatedchar(4,'*');
   cout<<"Empty string:"<<emptyString<<endl;
   cout<<"C_style string :"<<c_styleString<<endl;
   cout<<"Copied string using cnstr :"<<copyconstr_string<<endl;
   cout<<"Sub string :"<<substring<<endl;
   cout<<"Repeated character :"<<repeatedchar<<endl;

    return 0;
}

o/P:
Empty string:
C_style string :Hello siva
Copied string using cnstr :Hello siva
Sub string :si
Repeated character :****


----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


2.Lazy initialization in c++ and how to use it?


*Lazy initialization is a technique where you delay the creation or initialization of an object until the point at which it is actually needed. 
*This can be useful in situations where the initialization of an object is expensive or resource-intensive, and you want to defer it until it's necessary.

Eg:
#include <iostream>
#include <string>
using namespace std;
class LazyInitialization
{
    bool isinitialized;
    string expensiveData;
    void isInitialized()
    {
        isinitialized=true;
        expensiveData="This is an expensive operation";
    }
    public:
    LazyInitialization():isinitialized(false){}
    const string& getExpensiveData()
    {
        if(!isinitialized)
        {
            isInitialized();
        }
        return expensiveData;
    }
};
int main()
{
    LazyInitialization obj;
    cout<<"Getting expensive data :"<<obj.getExpensiveData()<<endl;
    cout<<"Again getting expensive data :"<<obj.getExpensiveData()<<endl;
}

o/p:
Getting expensive data :This is an expensive operation
Again getting expensive data :This is an expensive operation


-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

3. Template programming in c++?

*A C++ template is a powerful feature added to C++. 
*It allows you to define the generic classes and generic functions and thus provides support for generic programming.
*Generic programming is a technique where generic types are used as parameters in algorithms so that they can work for a variety of data types.
*types of templates: function template & template class


Eg: Function template

#include <iostream>
using namespace std;
template<typename T>
T add(T a,T b)
{
    return a+b;
}
int main()
{
   cout<<add(2,4)<<endl;
   cout<<add(4.1,2.1);
   return 0;
}
o/p:
6
6.2


#include <iostream>
using namespace std;
template<typename T1,typename T2>
T2 add(T1 a,T2 b)
{
    return a+b;
}
int main()
{
   cout<<add(2,4.1)<<endl;
   cout<<add(2.1,4);
   return 0;
}
o/p:
6.1
6



Eg: Template class

#include <iostream>
using namespace std;
template<class T>
class Arith
{
    T a,b;
    public:
    Arith(T x,T y):a(x),b(y){}
    T add()
    {
        return a+b;
    }
    void display()
    {
        cout<<"Addition :"<<add()<<endl;
    }
};
int main()
{
    Arith<int>obj(3,4);
    obj.display();
   
   return 0;
}
o/p:
Addition:7


(or)


#include <iostream>
using namespace std;
template<class T>
class Arith
{
    T a,b;
    public:
    Arith(T x,T y);
    T add();
    void display();
};
template<class T>
Arith<T>::Arith(T x,T y):a(x),b(y){}
template<class T>
T Arith<T>::add()
{
    return a+b;
}
template<class T>
void Arith<T>::display()
{
    cout<<"Addition :"<<add();
}

int main()
{
    Arith<int>obj(3,4);
    obj.display();
   
   return 0;
}
o/p:
Addition:7


----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

4. about new delete malloc free uses and diffrencees and internally how it works?

*new and delete are operators in C++ used for dynamic memory allocation, while malloc() and free() are functions in C used for the same purpose.


new & delete c++:
----------------

Usage:

new: Used to allocate memory for a single object and return a pointer to that object.
delete: Used to deallocate memory that was previously allocated using new.

Eg:
int* ptr = new int;  // Allocates memory for an integer
// Use ptr...
delete ptr;          // Deallocates the memory

Differences:

new and delete are C++ operators.
They also support constructors and destructors for user-defined types.
They implicitly call constructors for objects and destructors when delete is used.

Internal Working:

new internally uses malloc to allocate memory.
It also constructs the object by calling its constructor.
delete calls the object's destructor and then uses free to deallocate the memory.




malloc() and free() (C):
-----------------------

Usage:

malloc(): Used to allocate a specified number of bytes of memory and returns a void pointer (void*).
free(): Used to deallocate memory that was previously allocated using malloc().

int* ptr = (int*)malloc(sizeof(int));  // Allocates memory for an integer
// Use ptr...
free(ptr);                            // Deallocates the memory

Differences:

malloc() and free() are C functions.
They do not call constructors or destructors; they are more low-level.


Internal Working:

malloc allocates a block of memory of the specified size.
free deallocates the block of memory, making it available for reuse.
malloc and free do not initialize or clean up objects; they only deal with raw memory.

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

5. about mutable keyword?
*In C++, the mutable keyword is used in the context of member variables within a const member function of a class.
*When a member variable is declared as mutable, it means that the variable can be modified even within a const member function.
*This allows for changing the state of an object while still ensuring that the function itself doesn't modify other non-mutable member variables.


Eg:
#include <iostream>
using namespace std;
class VARIABLES
{
    int reg_var;
    mutable int   mutable_var;
    public:
    VARIABLES(int reg,int mu):reg_var(reg),mutable_var(mu){}
    void nonconstMemberfunction()
    {
       reg_var=10;
       mutable_var=20;
    }
    void constMemberfunction()const
    {
        //reg_var=3;
        mutable_var=4;
    }
    void display()
    {
        cout<<"Regular variable :"<<reg_var<<endl;
        cout<<"Mutable variable :"<<mutable_var<<endl;
    }
};
int main()
{
    VARIABLES obj(1,2);
    obj.display();
    obj.nonconstMemberfunction();
    obj.display();
    obj.constMemberfunction();
    obj.display();
}

o/p:
Regular variable :1
Mutable variable :2
Regular variable :10
Mutable variable :20
Regular variable :10
Mutable variable :4


NOTE: In nonconstmember function we can modify both regular/mutuable variable, but inside const member function we can modify only mutuable variable.


--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
6. about casting and types of casting and when which casting should be used?

*Casting in C++ refers to the conversion of one data type to another. There are several types of casting in C++, each serving different purposes.
 Here are the main types of casting:

static_cast:
-----------
*The static_cast is a type of casting operator in C++ that is used for well-defined conversions between types.
*It is a compile-time cast and is generally safer than some other types of casting, like reinterpret_cast.
*The static_cast performs type checking at compile-time, ensuring that the conversion is valid based on the types involved.
*static_cast can be used for converting between integral and floating-point types.


Eg:
#include <iostream>
using namespace std;

int main() {
    float val = 4.4;
    int intValue = static_cast<int>(val);
    cout << intValue << endl;  // Outputs: 4

    int val2 = 3;
    float floatValue = static_cast<float>(val2);
    cout << floatValue << endl;  // Outputs: 3.0

    return 0;
}


Dynamic Cast (dynamic_cast):
-------------------------------

Used for conversions between polymorphic types (types with at least one virtual function).
It performs a runtime check to ensure the conversion is valid.
Example: DerivedClass* derivedPtr = dynamic_cast<DerivedClass*>(basePtr);




const cast(const_cast):
----------------------
*const_cast is a casting operator in C++ that is used to add or remove the const qualifier from a variable.
*It provides a way to cast away the constness of a variable, allowing modification of a value that was originally declared as const. 

#include <iostream>

int main() {
    const int constValue = 42;

    // Using const_cast to remove const qualifier
    int* nonConstPtr = const_cast<int*>(&constValue);

    // Modifying the value through the non-const pointer
    *nonConstPtr = 99;

    // Display the modified value
    std::cout << "Modified Value: " << *nonConstPtr << std::endl;

    return 0;
}
o/p:
Modified Value: 99



Reinterpret Cast (reinterpret_cast):
------------------------------------

Used for low-level casting between pointer types and converting between unrelated types.
It is less type-safe and should be used with caution.
Example: int intValue = reinterpret_cast<int>(pointerValue);


int intValue = 42;

// Using reinterpret_cast to convert the address of an int variable to a char pointer
char* charPtr = reinterpret_cast<char*>(&intValue);
